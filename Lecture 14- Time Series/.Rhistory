gdp
ts(gdp)
ts(gdp$price)
ts(gdp$price)
adf.test(ts(gdp$price))
adf.test(ts(gdp$price),order=3)
gdp$price
adf.test(ts(gdp$price),order=3)
adf.test()
??adf.test
adf.test(ts(gdp$price),order=3)
adf.test(ts(gdp$price))
summary(adf.test(ts(gdp$price)))
adf.test(ts(gdp$price))
adf.test(usa.ts.df$f, k=10)
adf.test(gdp$price, k=10)
adf.test(gdp$price, k=10)
adf.test(gdp$price, k=10)
adf.test(gdp$price, k=4)
adf.test(gdp$price, k=3)
adf.test(gdp$price, k=6)
adf.test(gdp$price, k=10)
plot(gdp$price)
adf.test(gdp$price, k=10)
f.dyn <- dynlm(d(f)~L(f)+L(d(f)))
adf.test(ts(gdp$price))
gdp2<-ts(gdp$price)
dynlm(d(gdp2)~L(gdp2)+L(d(gdp2)))
library(dyn)
library(dynlm)
install.packages("dynlm")
library(dynlm)
dynlm(d(gdp2)~L(gdp2)+L(d(gdp2)))
tidy(dynlm(d(gdp2)~L(gdp2)+L(d(gdp2))))
adf.test(gdp2, k=2)
??adf.test
tidy(dynlm(d(gdp2)~L(gdp2,1:2)+L(d(gdp2))))
tidy(dynlm(d(gdp2)~L(gdp2,1:2)+L(d(gdp2),1:2)))
tidy(dynlm(d(gdp2)~L(gdp2,1:2)+L(d(gdp2),1:2)))
tidy(dynlm(d(gdp2)~L(gdp2,1:2)+L(d(gdp2),1:2)))
f.dyn <- dynlm(d(f)~L(f)+L(d(f)))
tidy(dynlm(d(gdp2)~L(gdp2,1:2)+L(d(gdp2),1:2)))
tidy(dynlm(d(gdp2)~L(gdp2,1:2)+L(d(gdp2),1:3)))
tidy(dynlm(d(gdp2)~L(gdp2,1:2)+L(d(gdp2),2:3)))
tidy(dynlm(d(gdp2)~L(gdp2,1)+L(d(gdp2),2:3)))
tidy(dynlm(d(gdp2)~L(gdp2,1)+L(d(gdp2),2:3)))
tidy(dynlm(d(gdp2)~L(gdp2,1)+L(d(gdp2),2:4)))
adf.test(gdp2, k=2)
adf.test(gdp2, k=2)
adf.test(gdp2, k=2)
adf.test(gdp2, k=3)
adf.test(gdp2, k=3)
ggplot(gdp, aes(date, price)) + geom_line() +
scale_x_date() + ylab("Annualized GDP Growth") + xlab("")
# Run various AR(p) models
ar1<-ar(gdp,order=1)
ar2<-ar(gdp,order=2)
summary(ar1)
# Run various AR(p) models
ar1<-ar(gdp,order=1)
ar2<-ar(gdp,order=2)
ar1
# Run various AR(p) models
ar1<-ar(gdp,order=1)
ar2<-ar(gdp,order=2)
ar1
# Run various AR(p) models
ar1<-ar(gdp$price,order=1)
ar2<-ar(gdp$price,order=2)
ar1
# Run various AR(p) models
ar1<-ar(gdp$price,order=1)
ar2<-ar(gdp$price,order=2)
ar2
# Run various AR(p) models
ar1<-ar(gdp$price,order=1)
ar2<-ar(gdp$price,order=2)
ar1
# automatic lag selection
ar(gdp$price)
dt<-read.csv("steel.csv")
dt2<-ts(dt)
>summary(dynlm(output~L(output,1:3)+L(hours,1:3), data=dt2))
Residuals:
Min      1Q  Median      3Q     Max
-34.162  -4.769   0.439   6.952  13.480
Coefficients:
Estimate Std. Error t value Pr(>|t|)
(Intercept)     196.56293   55.49461   3.542  0.00205 **
L(output, 1:3)1  -0.01371    0.29492  -0.046  0.96339
L(output, 1:3)2   0.01829    0.31067   0.059  0.95363
L(output, 1:3)3  -0.17356    0.21767  -0.797  0.43459
L(hours, 1:3)1    0.46844    0.92788   0.505  0.61918
L(hours, 1:3)2   -0.90532    1.33926  -0.676  0.50679
L(hours, 1:3)3   -0.20820    0.84409  -0.247  0.80769
---
Signif. codes:  0 ?***? 0.001 ?**? 0.01 ?*? 0.05 ?.? 0.1 ? ? 1
Residual standard error: 10.44 on 20 degrees of freedom
Multiple R-squared:  0.5985,	Adjusted R-squared:  0.478
F-statistic: 4.969 on 6 and 20 DF,  p-value: 0.002905
setwd("~/Dropbox/Metrics 2019/Lecture 1- Time Series/")
dt<-read.csv("steel.csv")
dt2<-ts(dt)
>summary(dynlm(output~L(output,1:3)+L(hours,1:3), data=dt2))
Residuals:
Min      1Q  Median      3Q     Max
-34.162  -4.769   0.439   6.952  13.480
Coefficients:
Estimate Std. Error t value Pr(>|t|)
(Intercept)     196.56293   55.49461   3.542  0.00205 **
L(output, 1:3)1  -0.01371    0.29492  -0.046  0.96339
L(output, 1:3)2   0.01829    0.31067   0.059  0.95363
L(output, 1:3)3  -0.17356    0.21767  -0.797  0.43459
L(hours, 1:3)1    0.46844    0.92788   0.505  0.61918
L(hours, 1:3)2   -0.90532    1.33926  -0.676  0.50679
L(hours, 1:3)3   -0.20820    0.84409  -0.247  0.80769
---
Signif. codes:  0 ?***? 0.001 ?**? 0.01 ?*? 0.05 ?.? 0.1 ? ? 1
Residual standard error: 10.44 on 20 degrees of freedom
Multiple R-squared:  0.5985,	Adjusted R-squared:  0.478
F-statistic: 4.969 on 6 and 20 DF,  p-value: 0.002905
# Read in the Steel Data
dt<-read.csv("steel.csv")
# convert to time series
dt2<-ts(dt)
dt2
# Run ADL(3,3) Regression
>summary(dynlm(output~L(output,1:3)+L(hours,1:3), data=dt2))
Residuals:
Min      1Q  Median      3Q     Max
-34.162  -4.769   0.439   6.952  13.480
Coefficients:
Estimate Std. Error t value Pr(>|t|)
(Intercept)     196.56293   55.49461   3.542  0.00205 **
L(output, 1:3)1  -0.01371    0.29492  -0.046  0.96339
L(output, 1:3)2   0.01829    0.31067   0.059  0.95363
L(output, 1:3)3  -0.17356    0.21767  -0.797  0.43459
L(hours, 1:3)1    0.46844    0.92788   0.505  0.61918
L(hours, 1:3)2   -0.90532    1.33926  -0.676  0.50679
L(hours, 1:3)3   -0.20820    0.84409  -0.247  0.80769
---
Signif. codes:  0 ?***? 0.001 ?**? 0.01 ?*? 0.05 ?.? 0.1 ? ? 1
Residual standard error: 10.44 on 20 degrees of freedom
Multiple R-squared:  0.5985,	Adjusted R-squared:  0.478
F-statistic: 4.969 on 6 and 20 DF,  p-value: 0.002905
summary(dynlm(output~L(output,1:3)+L(hours,1:3), data=dt2))
?ts
ts # Load libraries
library(tibbletime) # Future of tidy time series analysis
library(tidyquant)  # Loads tidyverse, tq_get()
# Load libraries
library(tibbletime) # Future of tidy time series analysis
library(tidyquant)  # Loads tidyverse, tq_get()
tbl_time(steel)
tbl_time(dt)
dt
library(tibbletime)
library(tibbletime)
install.packages("tibbletime")
library(tibbletime)
tibble_time(dt)
dt
tbl_time(dt)
tbl_time(dt)
?tbl_time
tbl_time(dt,index=dt$Year)
tbl_time(dt,index=Year)
tbl_time(dt,index="Year")
tbl_time(dt,index="Year")
# Read in the Steel Data
dt<-read.csv("steel.csv")
# convert to time series
dt2<-ts(dt)
# Run ADL(3,3) Regression
summary(dynlm(output~L(output,1:3)+L(hours,1:3), data=dt2))
grangertest(output~ hours, order=3,data=dt)
grangertest(output~ hours, order=3,data=dt2)
grangertest(output~ hours, order=3,data=dt2)
# do some granger tests
grangertest(output~ hours, order=3,data=dt2)
grangertest(hours~ output, order=3,data=dt2)
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
geom_point()+
geom_line()
gdp2<-ts(gdp$price)
tidy(dynlm(d(gdp2)~L(gdp2,1)+L(d(gdp2),2:4)))
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
#geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
#geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
#geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
#geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
#geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
#geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
#geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
#geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
#geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
#geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
#geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
#geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
#geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
#geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
#geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
#geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
#geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
#geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
#geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
#geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
#geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
#geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
#geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
#geom_point()+
geom_line()
# Dickey-Fuller Test
gdp2<-ts(gdp$price)
# run the regression
tidy(dynlm(d(gdp2)~L(gdp2,1)+L(d(gdp2),2:4)))
# skip to the test
adf.test(gdp2, k=3)
adf.test
??adf.test
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
#geom_point()+
geom_line()
alcohol_sales_tbl <- tq_get("S4248SM144NCEN",
get  = "economic.data",
from = "2000-01-01",to   = "2016-12-31")
## Alcohol Data
alcohol_sales_tbl <- tq_get("S4248SM144NCEN",
get  = "economic.data",
from = "2007-01-01",to   = "2016-12-31")
## Alcohol Data
alcohol_sales_tbl <- tq_get("S4248SM144NCEN",
get  = "economic.data",
from = "2007-01-01",to   = "2018-12-31")
alcohol_sales_tbl
alcohol_sales_tbl %>%
ggplot(aes(x = date, y = price)) +
geom_line(size = 1, color = palette_light()[[1]]) +
geom_smooth(method = "loess") +
labs(title = "US Alcohol Sales: Monthly", x = "", y = "Millions") +
scale_y_continuous(labels = scales::dollar) +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
theme_tq()
## Alcohol Data
# This comes from https://cran.r-project.org/web/packages/sweep/vignettes/SW00_Introduction_to_sweep.html
alcohol_sales_tbl <- tq_get("S4248SM144NCEN",
get  = "economic.data",
from = "2007-01-01",to   = "2018-12-31")
# Plot with Exponential Moving Average
alcohol_sales_tbl %>%
ggplot(aes(x = date, y = price)) +
geom_line(size = 1, color = palette_light()[[1]]) +
geom_smooth(method = "loess") +
labs(title = "US Alcohol Sales: Monthly", x = "", y = "Millions") +
scale_y_continuous(labels = scales::dollar) +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
theme_tq()
tk_ts(alcohol_sales_tbl, start = 2007, freq = 12, silent = TRUE)
alcohol_sales_ts <- tk_ts(alcohol_sales_tbl, start = 2007, freq = 12, silent = TRUE)
alcohol_sales_ts
fit_ets <- alcohol_sales_ts %>%
ets()
summary(fit_ets)
ets(alcohol_sales_ts)
ets(alcohol_sales_ts)
sw_tidy(fit_ets)
# Make the plot of the smoothed fit
# note: yearmon is the time series index
augment_fit_ets %>%
ggplot(aes(x = index, y = .resid)) +
geom_hline(yintercept = 0, color = "grey40") +
geom_point(color = palette_light()[[1]], alpha = 0.5) +
geom_smooth(method = "loess") +
scale_x_yearmon(n = 10) +
labs(title = "US Alcohol Sales: ETS Residuals", x = "") +
theme_tq()
augment_fit_ets <- sw_augment(fit_ets)
augment_fit_ets
# Make the plot of the smoothed fit
# note: yearmon is the time series index
augment_fit_ets %>%
ggplot(aes(x = index, y = .resid)) +
geom_hline(yintercept = 0, color = "grey40") +
geom_point(color = palette_light()[[1]], alpha = 0.5) +
geom_smooth(method = "loess") +
scale_x_yearmon(n = 10) +
labs(title = "US Alcohol Sales: ETS Residuals", x = "") +
theme_tq()
augment_fit_ets
decomp_fit_ets %>%
gather(key = key, value = value, -index) %>%
mutate(key = forcats::as_factor(key)) %>%
ggplot(aes(x = index, y = value, group = key)) +
geom_line(color = palette_light()[[2]]) +
geom_ma(ma_fun = SMA, n = 12, size = 1) +
facet_wrap(~ key, scales = "free_y") +
scale_x_yearmon(n = 10) +
labs(title = "US Alcohol Sales: ETS Decomposition", x = "") +
theme_tq() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
decomp_fit_ets <- sw_tidy_decomp(fit_ets)
decomp_fit_ets
decomp_fit_ets %>%
gather(key = key, value = value, -index) %>%
mutate(key = forcats::as_factor(key)) %>%
ggplot(aes(x = index, y = value, group = key)) +
geom_line(color = palette_light()[[2]]) +
geom_ma(ma_fun = SMA, n = 12, size = 1) +
facet_wrap(~ key, scales = "free_y") +
scale_x_yearmon(n = 10) +
labs(title = "US Alcohol Sales: ETS Decomposition", x = "") +
theme_tq() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
decomp_fit_ets %>%
gather(key = key, value = value, -index) %>%
mutate(key = forcats::as_factor(key)) %>%
ggplot(aes(x = index, y = value, group = key)) +
geom_line(color = palette_light()[[2]]) +
geom_ma(ma_fun = SMA, n = 12, size = 1) +
facet_wrap(~ key, scales = "free_y") +
scale_x_yearmon(n = 10) +
labs(title = "US Alcohol Sales: ETS Decomposition", x = "") +
theme_tq() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
decomp_fit_ets %>%
gather(key = key, value = value, -index) %>%
mutate(key = forcats::as_factor(key)) %>%
ggplot(aes(x = index, y = value, group = key)) +
geom_line(color = palette_light()[[2]]) +
geom_ma(ma_fun = SMA, n = 12, size = 1) +
facet_wrap(~ key, scales = "free_y") +
scale_x_yearmon(n = 10) +
labs(title = "US Alcohol Sales: ETS Decomposition", x = "") +
theme_tq() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
decomp_fit_ets <- sw_tidy_decomp(fit_ets)
decomp_fit_ets
auto.arima
auto.arima(gdp)
auto.arima(gdp2)
auto.arima(gdp2)
auto.arima(gdp2)
auto.arima(gdp)
auto.arima(gdp)
auto.arima(alcohol_sales_ts)
# Auto ARIMA (2,10)
fit<-auto.arima(alcohol_sales_ts)
# Auto ARIMA (2,10)
fit<-auto.arima(alcohol_sales_ts)
